C++ code : - 

class Solution {
public:
    int minSwaps(vector<int>& nums) {
        int n = nums.size();
        int totalOnes = 0;

        // Count total number of 1s in the array
        for (int num : nums) {
            if (num == 1) totalOnes++;
        }

        // Edge case: If there are no 1s or the number of 1s equals the array length, no swaps are needed
        if (totalOnes == 0 || totalOnes == n) return 0;

        int minSwaps = n;  // Initialize to a large value
        int currentZeroes = 0;

        // Initialize the first window of size totalOnes
        for (int i = 0; i < totalOnes; i++) {
            if (nums[i] == 0) currentZeroes++;
        }
        minSwaps = currentZeroes;

        // Iterate over the array considering it as circular
        int start = 0;
        for (int end = totalOnes; end < n + totalOnes; end++) {
            // Remove the effect of the element going out of the window
            if (nums[start % n] == 0) currentZeroes--;
            // Add the effect of the new element coming into the window
            if (nums[end % n] == 0) currentZeroes++;

            // Update minimum swaps needed
            minSwaps = min(minSwaps, currentZeroes);

            // Move the window
            start++;
        }

        return minSwaps;
    }
};



JAVA : -

class Solution {
    public int minSwaps(int[] nums) {
        int n = nums.length;
        int totalOnes = 0;

        // Count total number of 1s in the array
        for (int num : nums) {
            if (num == 1) totalOnes++;
        }

        // Edge case: If there are no 1s or the number of 1s equals the array length, no swaps are needed
        if (totalOnes == 0 || totalOnes == n) return 0;

        int minSwaps = n;  // Initialize to a large value
        int currentZeroes = 0;

        // Initialize the first window of size totalOnes
        for (int i = 0; i < totalOnes; i++) {
            if (nums[i] == 0) currentZeroes++;
        }
        minSwaps = currentZeroes;

        // Iterate over the array considering it as circular
        int start = 0;
        for (int end = totalOnes; end < n + totalOnes; end++) {
            // Remove the effect of the element going out of the window
            if (nums[start % n] == 0) currentZeroes--;
            // Add the effect of the new element coming into the window
            if (nums[end % n] == 0) currentZeroes++;

            // Update minimum swaps needed
            minSwaps = Math.min(minSwaps, currentZeroes);

            // Move the window
            start++;
        }

        return minSwaps;
    }
}
